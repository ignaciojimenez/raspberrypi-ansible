---
- name: Pre-flight checks
  hosts: all
  tasks:
    - name: Ensure required variables are defined
      ansible.builtin.fail:
        msg: "Required variable '{{ item }}' is not defined"
      when: item is not defined
      with_items:
        - logs_dir
        - scripts_dir
        - logging_token
        - alert_token
        - locale
        - git_name
        - git_mail

- name: Setting initial global
  hosts: all
  tasks:
    - name: Set the host fact to inventory_hostname
      ansible.builtin.set_fact:
        host: "{{ inventory_hostname }}"

- name: Allow user to run as root
  hosts: all
  become: true
  tasks:
    - name: Creating a sudoer file
      community.general.sudoers:
        name: "{{ ansible_user_id }}_nopwd"
        state: present
        user: "{{ ansible_user_id }}"
        commands: ALL

- name: Import update and upgrade playbook
  ansible.builtin.import_playbook: common_playbooks/update_upgrade_clean.yml

- name: Import system configuration playbook
  ansible.builtin.import_playbook: common_playbooks/configure_system.yml

- name: Import bluetooth disabling playbook
  ansible.builtin.import_playbook: common_playbooks/disable_bluetooth.yml

- name: Import ssh configuration playbook
  ansible.builtin.import_playbook: common_playbooks/configure_ssh.yml

- name: Import script creation playbook
  ansible.builtin.import_playbook: common_playbooks/create_and_move_scripts.yml

- name: Import monitoring setup playbook
  ansible.builtin.import_playbook: common_playbooks/setup_monitoring.yml

- name: Import base software installation playbook
  ansible.builtin.import_playbook: common_playbooks/install_base_software.yml

- name: Import public gpg key from playbook
  ansible.builtin.import_playbook: common_playbooks/import_gpg_github.yml



- name: Import device specific playbook
  ansible.builtin.import_playbook: "host_playbooks/{{ host }}.yml"

- name: Import full upgrade and clean playbook
  ansible.builtin.import_playbook: common_playbooks/update_upgrade_clean.yml

- name: Reboot server when finished
  hosts: all
  become: true
  tasks:
    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot:
