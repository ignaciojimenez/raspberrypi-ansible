#!/bin/bash
# 
# Script to backup Unifi Controller configuration

set -e          # stop on errors
set -u          # stop on unset variables
set -o pipefail # stop on pipe failures

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

log_msg() {
  echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

if [ "$#" -lt 4 ]; then
  echo "Usage: $0 <logging_token> <alert_token> <upload_service> <email>"
  exit 1
fi

LOGGING_TOKEN="$1"
ALERT_TOKEN="$2"
UPLOAD_SERVICE="$3"
EMAIL="$4"

UNIFI_BACKUP_DIR="/var/lib/unifi/backup/autobackup"
TEMP_DIR="/tmp/unifi_backup_$(date +%Y%m%d_%H%M%S)"
BACKUP_FILE="/tmp/unifi_backup_$(date +%Y%m%d_%H%M%S).tar.gz"

# Check if backup directory exists and is accessible (may need sudo)
if ! sudo test -d "${UNIFI_BACKUP_DIR}"; then
  log_msg "${RED}Error: Unifi backup directory not found or not accessible: ${UNIFI_BACKUP_DIR}${NC}"
  exit 1
fi

# Create temp directory for backup
mkdir -p "${TEMP_DIR}" || {
  log_msg "${RED}Error: Failed to create temp directory: ${TEMP_DIR}${NC}"
  exit 1
}

# Find the most recent backup file (using sudo since files are owned by unifi user)
LATEST_BACKUP=$(sudo find "${UNIFI_BACKUP_DIR}" -name "*.unf" -type f -printf '%T@ %p\n' | sort -n | tail -n 1 | awk '{print $2}')

if [ -z "${LATEST_BACKUP}" ]; then
  log_msg "${RED}Error: No backup files found in ${UNIFI_BACKUP_DIR}${NC}"
  exit 1
fi

# Also copy the meta file which contains information about all backups
META_FILE="${UNIFI_BACKUP_DIR}/autobackup_meta.json"

log_msg "${GREEN}Found latest backup: $(basename "${LATEST_BACKUP}")${NC}"

# Copy files to temp directory (using sudo since files are owned by unifi user)
sudo cp "${LATEST_BACKUP}" "${TEMP_DIR}/" || {
  log_msg "${RED}Error: Failed to copy backup file to temp directory${NC}"
  exit 1
}

if sudo test -f "${META_FILE}"; then
  sudo cp "${META_FILE}" "${TEMP_DIR}/" || {
    log_msg "${YELLOW}Warning: Failed to copy meta file to temp directory${NC}"
    # Continue anyway as this is not critical
  }
fi

# Change ownership and permissions so that ansible user can read/write the files
sudo chown -R $(whoami):$(whoami) "${TEMP_DIR}" || {
  log_msg "${YELLOW}Warning: Failed to change ownership of temp directory${NC}"
  # Continue anyway, but use sudo for tar command
}

# Create archive (may need sudo if ownership change failed)
if [ -w "${TEMP_DIR}" ]; then
  tar -czf "${BACKUP_FILE}" -C "${TEMP_DIR}" . || {
    log_msg "${RED}Error: Failed to create archive${NC}"
    exit 1
  }
else
  # Fallback to using sudo for tar if ownership change failed
  sudo tar -czf "${BACKUP_FILE}" -C "${TEMP_DIR}" . || {
    log_msg "${RED}Error: Failed to create archive${NC}"
    exit 1
  }
  # Ensure ansible user can read the archive
  sudo chown $(whoami):$(whoami) "${BACKUP_FILE}" || {
    log_msg "${YELLOW}Warning: Failed to change ownership of backup file${NC}"
    # Continue anyway
  }
fi

log_msg "Created backup archive: ${BACKUP_FILE}"

# Use do_backup script if available
DO_BACKUP_SCRIPT="/home/$(whoami)/.scripts/do_backup"
if [ -f "${DO_BACKUP_SCRIPT}" ]; then
  log_msg "Using do_backup script for upload and notification"
  # Pass logging token for success notifications and alert token for failures
  "${DO_BACKUP_SCRIPT}" "${LOGGING_TOKEN}" "${UPLOAD_SERVICE}" "${BACKUP_FILE}" "${EMAIL}"
  backup_exit_code=$?
  
  if [ $backup_exit_code -eq 0 ]; then
    log_msg "${GREEN}Unifi configuration backup completed successfully${NC}"
  else
    log_msg "${RED}Unifi configuration backup failed with exit code: ${backup_exit_code}${NC}"
    exit $backup_exit_code
  fi
else
  # Fallback to direct upload if do_backup is not available
  log_msg "${YELLOW}do_backup script not found, using direct upload${NC}"
  
  # Upload to file sharing service
  UPLOAD_URL=$(curl -F "file=@${BACKUP_FILE}" "${UPLOAD_SERVICE}" 2>/dev/null)

  if [ -n "${UPLOAD_URL}" ]; then
    # Send success notification with the URL using logging token
    webhook_hook="https://hooks.slack.com/services/${LOGGING_TOKEN}"
    hostname_info=$(hostname)
    content="{\"text\":\"\`${hostname_info}\` - Unifi configuration backup completed. \nBackup: \`$(basename "${LATEST_BACKUP}")\` \nDownload: ${UPLOAD_URL}\"}"
    
    curl -s -X POST -H 'Content-type: application/json' --data "${content}" "${webhook_hook}"
    
    log_msg "${GREEN}Backup completed and notification sent. URL: ${UPLOAD_URL}${NC}"
  else
    log_msg "${RED}Failed to upload backup file${NC}"
    
    # Send failure notification using alert token
    alert_hook="https://hooks.slack.com/services/${ALERT_TOKEN}"
    hostname_info=$(hostname)
    content="{\"text\":\"\`${hostname_info}\` - Unifi configuration backup failed. Check logs.\"}"
    
    curl -s -X POST -H 'Content-type: application/json' --data "${content}" "${alert_hook}"
    exit 1
  fi
fi

# Clean up
log_msg "Cleaning up temporary files"
sudo rm -rf "${TEMP_DIR}" "${BACKUP_FILE}"

exit 0
