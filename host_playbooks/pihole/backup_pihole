#!/bin/bash
# 
# Script to backup pihole configuration

set -e          # stop on errors
set -u          # stop on unset variables
set -o pipefail # stop on pipe failures

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

log_msg() {
  echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

if [ "$#" -lt 4 ]; then
  echo "Usage: $0 <logging_token> <alert_token> <upload_service> <email>"
  exit 1
fi

LOGGING_TOKEN="$1"
ALERT_TOKEN="$2"
UPLOAD_SERVICE="$3"
EMAIL="$4"

BACKUP_DIR="/tmp/pihole_backup_$(date +%Y%m%d_%H%M%S)"
BACKUP_FILE="/tmp/pihole_backup_$(date +%Y%m%d_%H%M%S).tar.gz"

# Create temp directory for backup
log_msg "Creating temp directory for backup"
mkdir -p "${BACKUP_DIR}" || {
  log_msg "${RED}Error: Failed to create temp directory: ${BACKUP_DIR}${NC}"
  exit 1
}

# Backup pihole configuration files
log_msg "${GREEN}Backing up pihole configuration files${NC}"
sudo cp -r /etc/pihole "${BACKUP_DIR}/" || {
  log_msg "${RED}Error: Failed to copy pihole configuration${NC}"
  exit 1
}

sudo cp -r /etc/dnsmasq.d "${BACKUP_DIR}/" || {
  log_msg "${RED}Error: Failed to copy dnsmasq configuration${NC}"
  exit 1
}

# Change ownership and permissions so that ansible user can read/write the files
log_msg "Setting appropriate permissions"
sudo chown -R $(whoami):$(whoami) "${BACKUP_DIR}" || {
  log_msg "${YELLOW}Warning: Failed to change ownership of temp directory${NC}"
  # Continue anyway, but use sudo for tar command
}

# Create archive (may need sudo if ownership change failed)
log_msg "Creating backup archive"
if [ -w "${BACKUP_DIR}" ]; then
  tar -czf "${BACKUP_FILE}" -C "${BACKUP_DIR}" . || {
    log_msg "${RED}Error: Failed to create archive${NC}"
    exit 1
  }
else
  # Fallback to using sudo for tar if ownership change failed
  sudo tar -czf "${BACKUP_FILE}" -C "${BACKUP_DIR}" . || {
    log_msg "${RED}Error: Failed to create archive${NC}"
    exit 1
  }
  # Ensure ansible user can read the archive
  sudo chown $(whoami):$(whoami) "${BACKUP_FILE}" || {
    log_msg "${YELLOW}Warning: Failed to change ownership of backup file${NC}"
    # Continue anyway
  }
fi

log_msg "${GREEN}Created backup archive: ${BACKUP_FILE}${NC}"

# Upload to file sharing service
log_msg "Uploading backup to ${UPLOAD_SERVICE}"
UPLOAD_URL=$(curl -F "file=@${BACKUP_FILE}" "${UPLOAD_SERVICE}" 2>/dev/null)

if [ -n "${UPLOAD_URL}" ]; then
  # Send success notification with the URL using logging token
  webhook_hook="https://hooks.slack.com/services/${LOGGING_TOKEN}"
  hostname_info=$(hostname)
  content="{\"text\":\"\`${hostname_info}\` - Pihole configuration backup completed. \nDownload: ${UPLOAD_URL}\"}"
  
  curl -s -X POST -H 'Content-type: application/json' --data "${content}" "${webhook_hook}"
  
  log_msg "${GREEN}Backup completed and notification sent. URL: ${UPLOAD_URL}${NC}"
else
  log_msg "${RED}Failed to upload backup file${NC}"
  
  # Send failure notification using alert token
  alert_hook="https://hooks.slack.com/services/${ALERT_TOKEN}"
  hostname_info=$(hostname)
  content="{\"text\":\"\`${hostname_info}\` - Pihole configuration backup failed. Check logs.\"}"
  
  curl -s -X POST -H 'Content-type: application/json' --data "${content}" "${alert_hook}"
  exit 1
fi

# Clean up
log_msg "Cleaning up temporary files"
sudo rm -rf "${BACKUP_DIR}" "${BACKUP_FILE}"
